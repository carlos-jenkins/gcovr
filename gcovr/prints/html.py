# -*- coding:utf-8 -*-
#  _________________________________________________________________________
#
#  Gcovr: A parsing and reporting tool for gcov
#  Copyright (c) 2013 Sandia Corporation.
#  This software is distributed under the BSD License.
#  Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
#  the U.S. Government retains certain rights in this software.
#  For more information, see the README.md file.
#  _________________________________________________________________________

import os
import sys
import time

from html import escape
from string import Template
from datetime import date
from posixpath import commonprefix

from . import sort_keys


medium_coverage = 75.0
high_coverage = 90.0

#
# CSS declarations for the HTML output
#
css = Template("""

""")

#
# A string template for the root HTML output
#
tpl_root = Template('''
<html>

<head>
  <meta charset="utf-8">
  <title>${title}</title>
  <style>${css}</style>
</head>

<body>
<div class="gcovr">

<div class="header">

  <h1 class="title">${title}</h1>
  <span class="date">${date}</span>

  <table class="summary">
    <colgroup>
      <col width="25%">
      <col width="25%">
      <col width="25%">
      <col width="25%">
    </colgroup>

    <thead>
      <tr>
        <th></th>
        <th>Exec</th>
        <th>Total</th>
        <th>Coverage</th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>Branches:</td>
        <td>${branches_exec}</td>
        <td>${branches_total}</td>
        <td>${branches_coverage}</td>
      </tr>

      </tr>
        <td>Lines:</td>
        <td>${lines_exec}</td>
        <td>${lines_total}</td>
        <td>${lines_coverage}</td>
      </tr>
    </tbody>
  </table>

</div><!-- header -->

<div class="body">

  <table class="report">

    <thead>
      <tr>
        <th>File</th>
        <th colspan="3">Lines</th>
        <th colspan="2">Branches</th>
      </tr>
    </thead>

    <tbody>
      ${rows}
    </tbody>
  </table>

</div><!-- body -->

<div class="footer">
  <div class="credits">
    <a href="http://gcovr.com/"> Generated by GCOVR Version ${version}</a>
  </div>
</div><!-- footer -->

</div><!-- gcovr -->
</body>
</html>
''')

tpl_row = Template('''
      <tr>
        <!-- Filename -->
        <td class="file">${filename}</td>

        <!-- Lines -->
        <td class="lines graph">
          <div style="width:${lines_coverage}%;"></div>
        </td>

        <td class="lines percent">${lines_coverage}&nbsp;%</td>
        <td class="lines abs">
          <span class="lines exec">${lines_exec}</span> /
          <span class="lines total">${lines_total}</span>
        </td>

        <!-- Branches -->
        <td class="branches percent">${branches_coverage}&nbsp;%</td>
        <td class="branches abs">
          <span class="branches exec">${branches_exec}</span> /
          <span class="branches total">${branches_total}</span>
        </td>
      </tr>
''')

#
# A string template for the source file HTML output
#
tpl_src = Template('''
<html>

<head>
  <meta charset="utf-8">
  <title>${title}</title>
  <style>${css}</style>
</head>

<body>
<div class="gcovr">

<div class="header">

  <h1 class="title">${title}</h1>
  <span class="date">${date}</span>

  <table class="summary">
    <colgroup>
      <col width="25%">
      <col width="25%">
      <col width="25%">
      <col width="25%">
    </colgroup>

    <thead>
      <tr>
        <th></th>
        <th>Exec</th>
        <th>Total</th>
        <th>Coverage</th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>Branches:</td>
        <td>${branches_exec}</td>
        <td>${branches_total}</td>
        <td>${branches_coverage}</td>
      </tr>

      </tr>
        <td>Lines:</td>
        <td>${lines_exec}</td>
        <td>${lines_total}</td>
        <td>${lines_coverage}</td>
      </tr>
    </tbody>
  </table>

</div><!-- header -->

<div class="body">

  <table class="source">

    <thead>
      <tr>
        <th>Line</th>
        <th>Exec</th>
        <th>Source</th>
      </tr>
    </thead>

    <tbody>
      ${rows}
    </tbody>
  </table>

</div><!-- body -->

<div class="footer">
  <div class="credits">
    <a href="http://gcovr.com/"> Generated by GCOVR Version ${version}</a>
  </div>
</div><!-- footer -->

</div><!-- gcovr -->
</body>
</html>
''')


#
# Produce an HTML report
#
def print_html_report(covdata, options):

    details = options.html_details
    if options.output is None:
        details = False
    data = {}
    data['TIME'] = str(int(time.time()))
    data['DATE'] = date.today().isoformat()
    data['ROWS'] = []
    data['COVERAGE_MED'] = medium_coverage
    data['COVERAGE_HIGH'] = high_coverage
    data['CSS'] = css
    data['DIRECTORY'] = ''

    branchTotal = 0
    branchCovered = 0
    options.show_branch = True
    for key in covdata.keys():
        (total, covered, percent) = covdata[key].coverage()
        branchTotal += total
        branchCovered += covered
    data['BRANCHES_EXEC'] = str(branchCovered)
    data['BRANCHES_TOTAL'] = str(branchTotal)
    coverage = 0.0 if branchTotal == 0 else \
        round(100.0 * branchCovered / branchTotal, 1)
    data['BRANCHES_COVERAGE'] = str(coverage)

    lineTotal = 0
    lineCovered = 0
    options.show_branch = False
    for key in covdata.keys():
        (total, covered, percent) = covdata[key].coverage()
        lineTotal += total
        lineCovered += covered
    data['LINES_EXEC'] = str(lineCovered)
    data['LINES_TOTAL'] = str(lineTotal)
    coverage = 0.0 if lineTotal == 0 else \
        round(100.0 * lineCovered / lineTotal, 1)
    data['LINES_COVERAGE'] = str(coverage)

    # Generate the coverage output (on a per-package basis)
    files = []
    filtered_fname = ''
    keys = sort_keys(covdata, options)

    for f in keys:
        cdata = covdata[f]
        filtered_fname = options.root_filter.sub('', f)
        files.append(filtered_fname)
        cdata._filename = filtered_fname
        ttmp = os.path.abspath(options.output).split('.')
        if len(ttmp) > 1:
            cdata._sourcefile = \
                '.'.join(ttmp[:-1]) + \
                '.' + cdata._filename.replace('/', '_') + \
                '.' + ttmp[-1]
        else:
            cdata._sourcefile = \
                ttmp[0] + '.' + cdata._filename.replace('/', '_') + '.html'
    # Define the common root directory, which may differ from options.root
    # when source files share a common prefix.
    if len(files) > 1:
        commondir = commonprefix(files)
        if commondir != '':
            data['DIRECTORY'] = commondir
    else:
        dir_, file_ = os.path.split(filtered_fname)
        if dir_ != '':
            data['DIRECTORY'] = dir_ + os.sep

    # Generate rows
    even = True
    rows = []

    for f in keys:
        cdata = covdata[f]
        class_lines = 0
        class_hits = 0
        class_branches = 0
        class_branch_hits = 0
        for line in cdata.all_lines:
            hits = cdata.covered.get(line, 0)
            class_lines += 1
            if hits > 0:
                class_hits += 1
            branches = cdata.branches.get(line)
            if branches is None:
                pass
            else:
                b_hits = 0
                for v in branches.values():
                    if v > 0:
                        b_hits += 1
                coverage = 100 * b_hits / len(branches)
                class_branch_hits += b_hits
                class_branches += len(branches)

        lines_covered = 100.0 if class_lines == 0 else \
            100.0 * class_hits / class_lines
        branches_covered = 100.0 if class_branches == 0 else \
            100.0 * class_branch_hits / class_branches

        # Update even
        even = not even

        rows.append(tpl_row.substitute(
            even=even,
            filename=cdata._sourcefile,
            lines_coverage=lines_covered,
            lines_exec=class_hits,
            lines_total=class_lines,
            branches_coverage=branches_covered,
            branches_exec=class_branch_hits,
            branches_total=class_branches
        ))

    data['rows'] = '\n'.join(rows)

    html_str = tpl_root.substitute(**data)

    if options.output is None:
        sys.stdout.write(html_str)
        sys.stdout.write('\n')
    else:
        with open(options.output, 'w') as out:
            out.write(html_str)

    # Return, if no details are requested
    if not details:
        return

    #
    # Generate an HTML file for every source file
    #
    for f in keys:
        cdata = covdata[f]

        data['FILENAME'] = cdata._filename
        data['ROWS'] = ''

        options.show_branch = True
        branchTotal, branchCovered, tmp = cdata.coverage()
        data['BRANCHES_EXEC'] = str(branchCovered)
        data['BRANCHES_TOTAL'] = str(branchTotal)
        coverage = 0.0 if branchTotal == 0 else \
            round(100.0 * branchCovered / branchTotal, 1)
        data['BRANCHES_COVERAGE'] = str(coverage)

        options.show_branch = False
        lineTotal, lineCovered, tmp = cdata.coverage()
        data['LINES_EXEC'] = str(lineCovered)
        data['LINES_TOTAL'] = str(lineTotal)
        coverage = 0.0 if lineTotal == 0 else \
            round(100.0 * lineCovered / lineTotal, 1)
        data['LINES_COVERAGE'] = str(coverage)

        data['ROWS'] = []
        currdir = os.getcwd()
        os.chdir(options.root_dir)
        INPUT = open(data['FILENAME'], 'r')
        ctr = 1
        for line in INPUT:
            data['ROWS'].append(
                source_row(ctr, line.rstrip(), cdata)
            )
            ctr += 1
        INPUT.close()
        os.chdir(currdir)
        data['ROWS'] = '\n'.join(data['ROWS'])

        htmlString = tpl_src.substitute(**data)
        OUTPUT = open(cdata._sourcefile, 'w')
        OUTPUT.write(htmlString + '\n')
        OUTPUT.close()


def source_row(lineno, source, cdata):
    rowstr = Template('''
    <tr>
    <td align="right" class="lineno"><pre>${lineno}</pre></td>
    <td align="right" class="linecount ${covclass}">
        <pre>${linecount}</pre>
    </td>
    <td align="left" class="src ${covclass}"><pre>${source}</pre></td>
    </tr>''')
    kwargs = {}
    kwargs['lineno'] = str(lineno)
    if lineno in cdata.covered:
        kwargs['covclass'] = 'coveredLine'
        kwargs['linecount'] = str(cdata.covered.get(lineno, 0))
    elif lineno in cdata.uncovered:
        kwargs['covclass'] = 'uncoveredLine'
        kwargs['linecount'] = ''
    else:
        kwargs['covclass'] = ''
        kwargs['linecount'] = ''
    kwargs['source'] = escape(source)
    return rowstr.substitute(**kwargs)
